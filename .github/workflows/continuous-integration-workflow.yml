env:
  CI: true
jobs:
  aioxmpp:
    name: Execute aioxmpp-based CI tests
    needs: build
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout local actions (that are invoked in the 'startCIServer' and 'stopCIServer'
        steps)
      uses: actions/checkout@v4
      with:
        sparse-checkout: '.github

          '
    - continue-on-error: true
      name: Download distribution artifact from build job.
      uses: actions/download-artifact@v4
      with:
        name: distribution-java11
        path: .
    - continue-on-error: true
      name: untar distribution
      run: tar -xf distribution-artifact.tar
    - continue-on-error: true
      name: Checkout aioxmpp devel/head
      uses: actions/checkout@v4
      with:
        path: aioxmpp
        ref: devel
        repository: horazont/aioxmpp
    - continue-on-error: true
      name: Set up Python
      uses: actions/setup-python@v5
      with:
        check-latest: true
        python-version: 3.11
    - continue-on-error: true
      name: Install aoixmpp dependencies
      run: python -m pip install setuptools pytest pytest-cov coveralls pyOpenSSL
        pytz
    - continue-on-error: true
      name: Build aioxmpp
      run: python -m pip install .
      working-directory: ./aioxmpp
    - continue-on-error: true
      name: Create Openfire config file for aioxmpp
      run: 'cat >"openfire-config.ini" <<EOL

        [global]

        provisioner=aioxmpp.e2etest.provision.AnonymousProvisioner


        [aioxmpp.e2etest.provision.AnonymousProvisioner]

        domain=example.org

        host=localhost

        port=5222

        no_verify=true

        quirks=["https://zombofant.net/xmlns/aioxmpp/e2etest/quirks#no-adhoc-ping",
        "https://zombofant.net/xmlns/aioxmpp/e2etest/quirks#no-xep-0049", "https://zombofant.net/xmlns/aioxmpp/e2etest/quirks#muc-no-333"]

        EOL

        '
      working-directory: ./aioxmpp
    - continue-on-error: true
      id: startCIServer
      name: Start CI server from distribution
      uses: ./.github/actions/startserver-action
    - continue-on-error: true
      name: Run aioxmpp tests
      run: 'mkdir output

        python -m pytest -p aioxmpp.e2etest --e2etest-config="openfire-config.ini"
        --e2etest-only -k ''not test_set_topic and not test_publish_and_purge and
        not test_publish_multiple_and_get_by_id'' tests 2>&1 | tee output/aioxmpp.test.output.txt

        '
      working-directory: ./aioxmpp
    - continue-on-error: true
      if: always()
      name: Expose test output
      uses: actions/upload-artifact@v4
      with:
        name: aioxmpp test output
        path: aioxmpp/output
    - continue-on-error: true
      if: ${{ always() && steps.startCIServer.conclusion == 'success' }}
      name: Stop CI server
      uses: ./.github/actions/stopserver-action
    - continue-on-error: true
      if: always()
      name: Expose openfire output
      uses: actions/upload-artifact@v4
      with:
        name: openfire logs
        path: distribution/target/distribution-base/logs/*
  build:
    name: Build Openfire from source
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Set up JDK ${{ matrix.java }} ${{ matrix.distribution }}
      uses: actions/setup-java@v4
      with:
        cache: maven
        distribution: ${{ matrix.distribution }}
        java-version: ${{ matrix.java }}
    - continue-on-error: true
      name: Build with Maven
      run: "if [[ ${{ github.ref_name }} == 'main' ]]; then            \n  ./mvnw\
        \ -B install -Pcoverage --file pom.xml\nelse\n  ./mvnw -B install\nfi\n"
    - continue-on-error: true
      if: always()
      name: Upload failed test reports
      uses: actions/upload-artifact@v4
      with:
        name: surefire-reports_java${{ matrix.java }}
        path: xmppserver/target/surefire-reports
    - continue-on-error: true
      if: ${{ matrix.distribution == 'zulu' }}
      name: tar distribution
      run: tar -cf distribution-artifact.tar distribution/target/distribution-base
    - continue-on-error: true
      if: ${{ matrix.distribution == 'zulu' }}
      name: Upload distribution
      uses: actions/upload-artifact@v4
      with:
        name: distribution-java${{ matrix.java }}
        path: distribution-artifact.tar
    - continue-on-error: true
      if: ${{ matrix.distribution == 'zulu' && matrix.java == 11 && github.ref_name
        == 'main'}}
      name: Upload coverage report for 'xmppserver' module
      uses: actions/upload-artifact@v4
      with:
        name: Coverage Report for 'xmppserver' module
        path: xmppserver/target/site/jacoco/
    - continue-on-error: true
      if: ${{ matrix.distribution == 'zulu' && matrix.java == 11 }}
      name: Temporarily stash openfire artifacts from the mvn repo for later jobs
      uses: actions/upload-artifact@v4
      with:
        name: mvn-repo
        path: ~/.m2/repository/org/igniterealtime/openfire/
        retention-days: 1
    strategy:
      matrix:
        distribution:
        - zulu
        java:
        - 11
        - 17
  can-publish-docker:
    name: Check if Docker Hub secrets exist
    needs:
    - build
    - aioxmpp
    - connectivity
    - smack
    outputs:
      is_DOCKERHUB_SECRET_set: ${{ steps.checksecret_job.outputs.is_DOCKERHUB_SECRET_set
        }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      env:
        DOCKERHUB_SECRET: ${{ secrets.DOCKERHUB_TOKEN }}
      id: checksecret_job
      name: Check whether Docker Publish should be done
      run: 'echo "is_DOCKERHUB_SECRET_set: ${{ env.DOCKERHUB_SECRET != '''' }}"

        echo "is_DOCKERHUB_SECRET_set=${{ env.DOCKERHUB_SECRET != '''' }}" >> $GITHUB_OUTPUT

        '
  check_branch:
    outputs:
      is_publishable_branch: ${{ steps.check-branch.outputs.is_publishable_branch
        }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      id: check-branch
      name: check branch ${{ github.ref }} is either main or a version number
      run: "if [[ ${{ github.ref }} == 'refs/heads/main' || ${{ github.ref }} =~ refs\\\
        /heads\\/[0-9]+\\.[0-9]+ ]]; then            \n  echo \"is_publishable_branch=true\"\
        \ >> $GITHUB_OUTPUT\nelse\n  echo \"is_publishable_branch=false\" >> $GITHUB_OUTPUT\n\
        fi\n"
  connectivity:
    name: Execute Connectivity CI tests
    needs: build
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout local actions (that are invoked in the 'startCIServer' and 'stopCIServer'
        steps)
      uses: actions/checkout@v4
      with:
        sparse-checkout: '.github

          '
    - continue-on-error: true
      name: Download distribution artifact from build job.
      uses: actions/download-artifact@v4
      with:
        name: distribution-java11
        path: .
    - continue-on-error: true
      name: untar distribution
      run: tar -xf distribution-artifact.tar
    - continue-on-error: true
      id: startCIServer
      name: Start CI server from distribution
      uses: ./.github/actions/startserver-action
    - continue-on-error: true
      name: Run connectivity tests
      uses: ./.github/actions/connectivitytests-action
    - continue-on-error: true
      if: ${{ always() && steps.startCIServer.conclusion == 'success' }}
      name: Stop CI server
      uses: ./.github/actions/stopserver-action
  mysql:
    if: ${{ needs.should-do-database-upgrade-tests.outputs.check == 'true' || needs.check_branch.outputs.is_publishable_branch
      == 'true'}}
    name: Test MySQL Upgrades
    needs:
    - build
    - should-do-database-upgrade-tests
    - check_branch
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout Openfire
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Set up JDK 11 Zulu
      uses: actions/setup-java@v4
      with:
        cache: maven
        distribution: zulu
        java-version: 11
    - continue-on-error: true
      name: Restore mvn repo artifacts from build job
      uses: actions/download-artifact@v4
      with:
        name: mvn-repo
        path: ~/.m2/repository/org/igniterealtime/openfire/
    - continue-on-error: true
      name: Set environment variables
      run: 'echo "CONNECTION_STRING=jdbc:mysql://localhost:3306/openfire?rewriteBatchedStatements=true&characterEncoding=UTF-8&characterSetResults=UTF-8&serverTimezone=UTC"
        >> $GITHUB_ENV

        echo "CONNECTION_DRIVER=com.mysql.cj.jdbc.Driver" >> $GITHUB_ENV

        echo "CONNECTION_USERNAME=root" >> $GITHUB_ENV

        echo "CONNECTION_PASSWORD=SecurePa55w0rd" >> $GITHUB_ENV

        OPENFIREVSN=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)

        echo "OPENFIREVSN=$OPENFIREVSN" >> $GITHUB_ENV

        echo "JAVA_HOME=$(echo $JAVA_HOME_11_X64)" >> $GITHUB_ENV

        '
    - continue-on-error: true
      name: Download old Openfire database script
      run: 'mkdir olddb

        curl https://raw.githubusercontent.com/igniterealtime/Openfire/v3.9.3/src/database/openfire_mysql.sql
        > $GITHUB_WORKSPACE/olddb/openfire_mysql.sql

        '
    - continue-on-error: true
      name: Start database server and install database
      run: docker-compose -f ./build/ci/compose/mysql.yml up --detach
    - continue-on-error: true
      name: Build & run update tester
      run: 'pushd ./build/ci/updater

        ./mvnw package

        java -jar ./target/updaterunner-1.0.0-jar-with-dependencies.jar

        '
  postgres:
    if: ${{ needs.should-do-database-upgrade-tests.outputs.check == 'true' || needs.check_branch.outputs.is_publishable_branch
      == 'true'}}
    name: Test Postgres Upgrades
    needs:
    - build
    - should-do-database-upgrade-tests
    - check_branch
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout Openfire
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Set up JDK 11 Zulu
      uses: actions/setup-java@v4
      with:
        cache: maven
        distribution: zulu
        java-version: 11
    - continue-on-error: true
      name: Restore mvn repo artifacts from build job
      uses: actions/download-artifact@v4
      with:
        name: mvn-repo
        path: ~/.m2/repository/org/igniterealtime/openfire/
    - continue-on-error: true
      name: Set environment variables
      run: 'echo "CONNECTION_STRING=jdbc:postgresql://localhost:5432/openfire" >>
        $GITHUB_ENV

        echo "CONNECTION_DRIVER=org.postgresql.Driver" >> $GITHUB_ENV

        echo "CONNECTION_USERNAME=openfire" >> $GITHUB_ENV

        echo "CONNECTION_PASSWORD=SecurePa55w0rd" >> $GITHUB_ENV

        OPENFIREVSN=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)

        echo "OPENFIREVSN=$OPENFIREVSN" >> $GITHUB_ENV

        echo "JAVA_HOME=$(echo $JAVA_HOME_11_X64)" >> $GITHUB_ENV

        '
    - continue-on-error: true
      name: Download old Openfire database script
      run: 'mkdir olddb

        curl https://raw.githubusercontent.com/igniterealtime/Openfire/v3.9.3/src/database/openfire_postgresql.sql
        > $GITHUB_WORKSPACE/olddb/openfire_postgresql.sql

        '
    - continue-on-error: true
      name: Start database server and install database
      run: docker-compose -f ./build/ci/compose/postgresql.yml up --detach
    - continue-on-error: true
      name: Build & run update tester
      run: 'pushd ./build/ci/updater

        ./mvnw package

        java -jar ./target/updaterunner-1.0.0-jar-with-dependencies.jar

        '
  publish-docker:
    if: "needs.can-publish-docker.outputs.is_DOCKERHUB_SECRET_set == 'true' && \n\
      github.event_name == 'push' && \n(contains(github.ref, 'refs/tags/') || github.ref\
      \ == 'refs/heads/main')\n"
    name: Publish to Docker Hub
    needs:
    - can-publish-docker
    outputs:
      imagedigest: ${{ steps.docker_build.outputs.digest }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      if: ${{ github.ref == 'refs/heads/main' }}
      name: Set up variables if we're on main
      run: echo "SOURCE_TAG=alpha" >> $GITHUB_ENV
    - continue-on-error: true
      if: ${{ contains(github.ref, 'refs/tags/') }}
      name: Set up variables if we're on a tag
      run: echo "SOURCE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
    - continue-on-error: true
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.push.after }}
    - continue-on-error: true
      name: Download distribution artifact from build job.
      uses: actions/download-artifact@v4
      with:
        name: distribution-java11
        path: distribution/target/distribution-base
    - continue-on-error: true
      name: Fix file permissions
      run: find . -type f -name '*.sh' -exec chmod +x {} \;
    - continue-on-error: true
      name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - continue-on-error: true
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - continue-on-error: true
      name: Cache Docker layers
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        path: /tmp/.buildx-cache
        restore-keys: '${{ runner.os }}-buildx-

          '
    - continue-on-error: true
      name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
    - continue-on-error: true
      id: docker_build
      name: Build and push to Docker Hub
      uses: docker/build-push-action@v5
      with:
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
        context: .
        platforms: linux/amd64,linux/arm64
        push: false
        tags: ${{ secrets.DOCKERHUB_OPENFIREIMAGE }}:${{ env.SOURCE_TAG }}
    - continue-on-error: true
      name: Move cache
      run: 'rm -rf /tmp/.buildx-cache

        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

        '
    - continue-on-error: true
      name: Image digest
      run: 'echo Images published:

        echo ${{ secrets.DOCKERHUB_OPENFIREIMAGE }}:${{ steps.docker_build.outputs.digest
        }}

        echo ${{ secrets.DOCKERHUB_OPENFIREIMAGE }}:${{ env.SOURCE_TAG }}

        '
  publish-maven:
    if: ${{github.repository == 'igniterealtime/Openfire' && github.event_name ==
      'push' && needs.check_branch.outputs.is_publishable_branch == 'true'}}
    name: Publish to Maven
    needs:
    - aioxmpp
    - connectivity
    - smack
    - check_branch
    - sqlserver
    - postgres
    - mysql
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.push.after }}
    - continue-on-error: true
      name: Set up Java for publishing
      uses: actions/setup-java@v4
      with:
        cache: maven
        distribution: zulu
        java-version: 11
        server-id: igniterealtime
        server-password: IGNITE_REALTIME_MAVEN_PASSWORD
        server-username: IGNITE_REALTIME_MAVEN_USERNAME
    - continue-on-error: true
      env:
        IGNITE_REALTIME_MAVEN_PASSWORD: ${{ secrets.IGNITE_REALTIME_MAVEN_PASSWORD
          }}
        IGNITE_REALTIME_MAVEN_USERNAME: ${{ secrets.IGNITE_REALTIME_MAVEN_USERNAME
          }}
      name: Publish
      run: ./mvnw -B deploy -Pci -Dmaven.test.skip=true
  should-do-database-upgrade-tests:
    name: Check if database upgrade tests should be run
    outputs:
      check: ${{ steps.filter.outputs.database-relevant-files }}
    permissions:
      pull-requests: read
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout Openfire
      uses: actions/checkout@v4
    - continue-on-error: true
      id: filter
      name: Check for differences
      uses: dorny/paths-filter@v3
      with:
        filters: "database-relevant-files:\n  - 'distribution/src/database/**'\n \
          \ - 'build/ci/**'\n  - '.github/workflows/continuous-integration-workflow.yml'\n\
          \  - 'xmppserver/pom.xml'\n"
  smack:
    name: Execute Smack-based CI tests
    needs: build
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout local actions (that are invoked in the 'startCIServer' and 'stopCIServer'
        steps)
      uses: actions/checkout@v4
      with:
        sparse-checkout: '.github

          '
    - continue-on-error: true
      name: Download distribution artifact from build job.
      uses: actions/download-artifact@v4
      with:
        name: distribution-java11
        path: .
    - continue-on-error: true
      name: untar distribution
      run: tar -xf distribution-artifact.tar
    - continue-on-error: true
      id: startCIServer
      name: Start CI server from distribution
      uses: ./.github/actions/startserver-action
    - continue-on-error: true
      name: Run Smack tests against server
      uses: XMPP-Interop-Testing/xmpp-interop-tests-action@main
      with:
        adminAccountPassword: admin
        adminAccountUsername: admin
        disabledTests: EntityCapsTest,SoftwareInfoIntegrationTest,XmppConnectionIntegrationTest,StreamManagementTest,WaitForClosingStreamElementTest,IoTControlIntegrationTest,ModularXmppClientToServerConnectionLowLevelIntegrationTest
        domain: example.org
    - continue-on-error: true
      if: ${{ always() && steps.startCIServer.conclusion == 'success' }}
      name: Stop CI server
      uses: ./.github/actions/stopserver-action
  sqlserver:
    if: ${{ needs.should-do-database-upgrade-tests.outputs.check == 'true' || needs.check_branch.outputs.is_publishable_branch
      == 'true'}}
    name: Test SQL Server Upgrades
    needs:
    - build
    - should-do-database-upgrade-tests
    - check_branch
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout Openfire
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Set up JDK 11 Zulu
      uses: actions/setup-java@v4
      with:
        cache: maven
        distribution: zulu
        java-version: 11
    - continue-on-error: true
      name: Restore mvn repo artifacts from build job
      uses: actions/download-artifact@v4
      with:
        name: mvn-repo
        path: ~/.m2/repository/org/igniterealtime/openfire/
    - continue-on-error: true
      name: Set environment variables
      run: 'echo "CONNECTION_STRING=jdbc:sqlserver://localhost:1433;databaseName=openfire;applicationName=Openfire"
        >> $GITHUB_ENV

        echo "CONNECTION_DRIVER=com.microsoft.sqlserver.jdbc.SQLServerDriver" >> $GITHUB_ENV

        echo "CONNECTION_USERNAME=sa" >> $GITHUB_ENV

        echo "CONNECTION_PASSWORD=SecurePa55w0rd" >> $GITHUB_ENV

        OPENFIREVSN=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)

        echo "OPENFIREVSN=$OPENFIREVSN" >> $GITHUB_ENV

        echo "JAVA_HOME=$(echo $JAVA_HOME_11_X64)" >> $GITHUB_ENV

        '
    - continue-on-error: true
      name: Download old Openfire database script
      run: 'mkdir olddb

        curl https://raw.githubusercontent.com/igniterealtime/Openfire/v3.9.3/src/database/openfire_sqlserver.sql
        > $GITHUB_WORKSPACE/olddb/openfire_sqlserver.sql

        '
    - continue-on-error: true
      name: Start database server and install database
      run: docker-compose -f ./build/ci/compose/mssql.yml up --detach
    - continue-on-error: true
      name: Build & run update tester
      run: 'pushd ./build/ci/updater

        ./mvnw package

        java -jar ./target/updaterunner-1.0.0-jar-with-dependencies.jar

        '
  test-published-docker:
    if: contains(github.ref, 'refs/tags/')
    name: Test tagged images published to Docker Hub
    needs:
    - publish-docker
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Launch & Check Openfire
      run: "docker run --name openfire -d -p 9090:9090 ${{ secrets.DOCKERHUB_OPENFIREIMAGE\
        \ }}@${{needs.publish-docker.outputs.imagedigest}}\n\nattempt_counter=0\n\
        max_attempts=30\nuntil $(curl --output /dev/null --silent --head --fail http://127.0.0.1:9090);\
        \ do\n    if [ ${attempt_counter} -eq ${max_attempts} ];then\n      echo \"\
        Max attempts reached. Openfire failed to launch.\"\n      exit 1\n    fi\n\
        \n    printf '.'\n    attempt_counter=$(($attempt_counter+1))\n    sleep 1\n\
        done\necho \"Openfire Admin is reachable.\"\ndocker logs openfire\n"
name: Openfire CI
on:
  repository_dispatch:
    types: trigger-ga___continuous-integration-workflow.yml
